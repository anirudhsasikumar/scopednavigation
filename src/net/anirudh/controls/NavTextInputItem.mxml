<?xml version="1.0" encoding="utf-8"?>
<s:TextInput xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/halo"			 
			 focusAlpha="0"
			 text="Search"
			 skinClass="net.anirudh.skins.NavTextInputItemSkin"
			 height="22"
			 borderVisible="false"			
			 focusOut="this.text = promptText"
			 paddingLeft="6"
			 width="160"
			 rollOver="itemRollOver(event);"
			 rollOut="itemRollOut(event);"
			 keyDown="textChangingHandler(event)"
			 click="textClickHandler(event)"
			 enter="dispatchSearchEvent()"
			 >
	<!--
	/*
	* The contents of this file are subject to the Mozilla Public License Version
	* 1.1 (the "License"); you may not use this file except in compliance with
	* the License. You may obtain a copy of the License at
	* http://www.mozilla.org/MPL/
	*
	* Software distributed under the License is distributed on an "AS IS" basis,
	* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
	* for the specific language governing rights and limitations under the
	* License.
	*
	* The Original Code is the ScopedNavigation component.
	*
	* The Initial Developer of the Original Code is
	* Anirudh Sasikumar (http://anirudhs.chaosnet.org/).
	* Portions created by the Initial Developer are Copyright (C) 2008
	* the Initial Developer. All Rights Reserved.
	*
	* Contributor(s):
	*
	*/
	-->
	<fx:Metadata>
		[Event(name="search", type="net.anirudh.events.SelectSearchEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.ListEvent;
			
			import net.anirudh.events.SelectSearchEvent;
			import net.anirudh.skins.NavTextInputItemSkin;
			
			public var promptText:String = "Search";
			
			public var menu:IList;
			
			public var searchSelectedIndex:int = 0;
			
			import net.anirudh.container.NavContainer;
			
			protected function itemRollOver(event:MouseEvent):void
			{
				var navContainer:NavContainer = (this.owner as NavContainer);
				
				if (  !this.menu )
				{
					if ( navContainer )
						navContainer.dropdown.closeDropDown(true); 
										
					return;
				}				
				
				if ( navContainer )
				{
					if ( navContainer.dropdown.isDropDownOpen && navContainer.dropdown.dataProvider == this.menu )
						return;
					
					navContainer.dropdown.closeDropDown(false);					
					navContainer.dropdown.dataProvider = this.menu;
					navContainer.dropdown.stayOpen = true;
					navContainer.dropdown.selectedIndex = searchSelectedIndex;
					navContainer.dropdown.addEventListener(ListEvent.CHANGE, itemSelectHandler);
					navContainer.dropdown.x = navContainer.globalToLocal(parent.localToGlobal(new Point(this.x))).x
					callLater(navContainer.dropdown.openDropDown);					
				}
			}
			
			private function itemSelectHandler(event:Event):void
			{
				var navContainer:NavContainer = (this.owner as NavContainer);
				if ( !this.menu )
				{
					if ( navContainer )
						navContainer.removeEventListener(ListEvent.CHANGE, itemSelectHandler);
					return;
				}
				if ( navContainer )
				{					
					if ( navContainer.dropdown.dataProvider != this.menu )
					{
						navContainer.removeEventListener(ListEvent.CHANGE, itemSelectHandler);
						return;
					}
					
					if ( navContainer.dropdown.selectedIndex > -1  )
					{
						searchSelectedIndex = navContainer.dropdown.selectedIndex;
						if ( this.text == this.promptText || this.text == "" )
						{
							this.text = navContainer.dropdown.selectedItem;
						}
						this.promptText = navContainer.dropdown.selectedItem;
					}
					
				}
			}
			
			protected function itemRollOut(event:MouseEvent):void
			{
				Mouse.cursor = MouseCursor.AUTO;		
			}

			protected function textChangingHandler(event:Event):void
			{
				if ( this.promptText != "" && this.text == this.promptText )
				{
					this.text = "";	
									
					this.validateNow();
					
				}
			}


			protected function textClickHandler(event:MouseEvent):void
			{
				if ( this.text == this.promptText )
				{
					this.selectRange(0,0);
				}
			}
			
		
			
			public function dispatchSearchEvent():void
			{
				if ( this.text == promptText )
					return;
				var navContainer:NavContainer = (this.owner as NavContainer);
				if ( navContainer )
				{
					(navContainer.parent as MainNavigation).dispatchSearchSelectEvent(this.text);
				
					this.text = promptText;
					navContainer.dropdown.stayOpen = false;
					
					navContainer.dropdown.closeDropDown(true);					
				}
				
			}

		]]>
	</fx:Script>
	
</s:TextInput>
