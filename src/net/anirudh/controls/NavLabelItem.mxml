<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 rollOver="currentState = 'hovered';itemRollOver(event);"
		 rollOut="currentState='normal';"
		 click="itemrenderer1_clickHandler(event)"
		 autoDrawBackground="false"
		 height="50"
		 >
	<!--
	/*
	* The contents of this file are subject to the Mozilla Public License Version
	* 1.1 (the "License"); you may not use this file except in compliance with
	* the License. You may obtain a copy of the License at
	* http://www.mozilla.org/MPL/
	*
	* Software distributed under the License is distributed on an "AS IS" basis,
	* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
	* for the specific language governing rights and limitations under the
	* License.
	*
	* The Original Code is the ScopedNavigation component.
	*
	* The Initial Developer of the Original Code is
	* Anirudh Sasikumar (http://anirudhs.chaosnet.org/).
	* Portions created by the Initial Developer are Copyright (C) 2008
	* the Initial Developer. All Rights Reserved.
	*
	* Contributor(s):
	*
	*/
	-->
	<fx:Script>
		<![CDATA[
			import net.anirudh.container.NavContainer;
			
			protected function itemRollOver(event:MouseEvent):void
			{
				var navContainer:NavContainer = (this.owner['owner'] as NavContainer);
				if ( !this.data.hasOwnProperty("menu") )
				{					
					if ( navContainer )
					{
						navContainer.dropdown.stayOpen = false;
						navContainer.dropdown.closeDropDown(true);
					}
					
					return;
				}				
				
				if ( navContainer )
				{
					if ( navContainer.dropdown.isDropDownOpen && navContainer.dropdown.dataProvider == this.data.menu )
						return;
					navContainer.dropdown.stayOpen = false;
					navContainer.dropdown.closeDropDown(false);
					navContainer.dropdown.selectedIndex = -1;					
					navContainer.dropdown.dataProvider = this.data.menu;
					navContainer.dropdown.x = navContainer.globalToLocal(this['owner'].contentToGlobal(new Point(this.x))).x
					callLater(navContainer.dropdown.openDropDown);
				}
			}
		
			
			protected function itemrenderer1_clickHandler(event:MouseEvent):void
			{
				var navContainer:NavContainer = (this.owner['owner'] as NavContainer);
				if ( navContainer )
				{
					(navContainer.parent as MainNavigation).dispatchTopSelectEvent(0, this.data.label);				
				}
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:Rect left="0" top="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor alpha="0" />
		</s:fill>
	</s:Rect>
	<s:Label 		
		text="{data.label}"
		paddingLeft="20" 		
		verticalCenter="0"
		/>
	
</s:ItemRenderer>
